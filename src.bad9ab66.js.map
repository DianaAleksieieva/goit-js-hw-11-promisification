{"version":3,"sources":["js/task1.js","js/task2.js","js/task3.js","index.js"],"names":["delay","ms","Promise","resolve","setTimeout","logger","time","console","log","then","users","name","active","toggleUserState","allUsers","username","map","user","table","randomIntegerFromInterval","min","max","Math","floor","random","makeTransaction","transaction","reject","id","logSuccess","logError","warn","amount","catch"],"mappings":";AAAA,MAAMA,EAAQC,GACL,IAAIC,QAASC,IAClBC,WAAW,KACTD,EAAQF,IACPA,KAIDI,EAASC,GAAQC,QAAQC,uBAAuBF,OAEtDN,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,MAAMS,KAAKJ;;ACZjB,MAAMK,EAAQ,CACZ,CAAEC,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,IAGpBC,EAAkB,CAACC,EAAUC,IACxB,IAAIb,QAASC,IAGhBA,EAFqBW,EAASE,IAAIC,GAC9BA,EAAKN,OAASI,EAAW,IAAKE,EAAML,QAASK,EAAKL,QAAWK,MAOzEJ,EAAgBH,EAAO,SAASD,KAAKF,QAAQW,OAC7CL,EAAgBH,EAAO,QAAQD,KAAKF,QAAQW;;ACf5C,MAAMC,EAA4B,CAACC,EAAKC,IAC/BC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,GAGhDK,EAAmBC,GACd,IAAIxB,QAAQ,CAACC,EAASwB,KACnB3B,MAAAA,EAAQmB,EAA0B,IAAK,KAE7Cf,WAAW,KACYkB,KAAKE,SAAW,GAEzCrB,EAAQ,CAAEyB,GAAIF,EAAYE,GAAItB,KAAMN,IAEpC2B,EAAOD,EAAYE,KAEd5B,KAIL6B,EAAa,EAAGD,GAAAA,EAAItB,KAAAA,MACxBC,QAAQC,mBAAmBoB,kBAAmBtB,QAG1CwB,EAAWF,IACfrB,QAAQwB,qCAAqCH,+BAG/CH,EAAgB,CAAEG,GAAI,GAAII,OAAQ,MAAOvB,KAAKoB,GAAYI,MAAMH,GAChEL,EAAgB,CAAEG,GAAI,GAAII,OAAQ,MAAOvB,KAAKoB,GAAYI,MAAMH;;AC5BhE,aAFA,QAAA,cACA,QAAA,cACA,QAAA","file":"src.bad9ab66.js","sourceRoot":"../src","sourcesContent":["const delay = ms => {\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      resolve(ms);\n    }, ms)\n  })\n};\n\nconst logger = time => console.log(`Fulfilled after ${time}ms`);\n\ndelay(2000).then(logger); \ndelay(1000).then(logger); \ndelay(1500).then(logger); ","const users = [\n  { name: 'Mango', active: true },\n  { name: 'Poly', active: false },\n  { name: 'Ajax', active: false },\n];\n\nconst toggleUserState = (allUsers, username) => {\n    return new Promise((resolve) => {\n        const updatedUsers = allUsers.map(user =>\n            user.name === username ? { ...user, active: !user.active } : user);\n        resolve(updatedUsers)\n    });\n};\n\n\n// The function should work like this\ntoggleUserState(users, 'Mango').then(console.table);\ntoggleUserState(users, 'Ajax').then(console.table);","\n\nconst randomIntegerFromInterval = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n};\n\nconst makeTransaction = (transaction) => {\n    return new Promise((resolve, reject) => {\n        const delay = randomIntegerFromInterval(200, 500);\n\n        setTimeout(() => {\n            const canProcess = Math.random() > 0.3;\n if (canProcess) {\n      resolve({ id: transaction.id, time: delay });\n    } else {\n      reject(transaction.id);\n    }\n        }, delay)\n    });\n};\n\nconst logSuccess = ({ id, time }) => {\n  console.log(`Transaction ${id} processed in ${time}ms`);\n};\n\nconst logError = id => {\n  console.warn(`Error processing transaction ${id}. Please try again later.`);\n};\n// The function should work like this\nmakeTransaction({ id: 70, amount: 150 }).then(logSuccess).catch(logError);\nmakeTransaction({ id: 71, amount: 230 }).then(logSuccess).catch(logError);","import './js/task1';\nimport './js/task2';\nimport './js/task3';"]}